{"version":3,"sources":["app.ts","environment.ts","main.ts","resources/index.ts","resources/elements/phone-input.ts","C:/temp/aucomp/src/app.html","C:/temp/aucomp/src/resources/elements/phone-input.html"],"names":[],"mappings":";;IAAA;QAAA;YACE,aAAQ,GAAG,cAAc,CAAC;QAC5B,CAAC;QAAD,UAAC;IAAD,CAFA,AAEC,IAAA;IAFY,WAAG,MAEf,CAAA;;;;;ICFD;sBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;ICEI,OAAQ,CAAC,MAAM,CAAC;QACpB,QAAQ,EAAE;YACR,gBAAgB,EAAE,KAAK;SACxB;KACF,CAAC,CAAC;IAEH,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC,CAAC;QAExB,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAde,iBAAS,YAcxB,CAAA;;;;;ICvBD,mBAA0B,MAA8B;QACtD,MAAM,CAAC,eAAe,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;IACrD,CAAC;IAFe,iBAAS,YAExB,CAAA;;;;;;;;;;;;;;ICFD,IAAM,MAAM,GAAG,yBAAyB,CAAC;IAEzC;QAAA;QAkCA,CAAC;QA5BC,6BAAQ,GAAR;YACE,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC;QAED,iCAAY,GAAZ;YACE,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC;QAED,oCAAe,GAAf;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAChB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;YACjC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;gBAC/B,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC;QACH,CAAC;QAEO,8BAAS,GAAjB;YACE,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAC/D,IAAI;gBACF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAA;QAClC,CAAC;QAEO,6BAAQ,GAAhB;YACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1D,CAAC;QAhCD;YAAC,4BAAQ,CAAC,EAAE,kBAAkB,EAAE,+BAAW,CAAC,MAAM,EAAE,CAAC;;iDAAA;QAGrD;YAAC,4BAAQ;;oDAAA;QA8BX,iBAAC;IAAD,CAlCA,AAkCC,IAAA;IAlCY,kBAAU,aAkCtB,CAAA;;;ACtCD;ACAA","file":"app-bundle.js","sourcesContent":["export class App {\n  telefone = 'Hello World!';\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  config.globalResources([\"./elements/phone-input\"]);\n}\n","import { bindable, bindingMode } from 'aurelia-framework';\n\nconst padrao = /(\\d{2})(\\d{4,5})(\\d{4})/;\n\nexport class PhoneInput {\n  @bindable({ defaultBindingMode: bindingMode.twoWay }) value: string;\n  displayValue: string;\n  isInvalid: boolean;\n  @bindable hasFocus: boolean;\n\n  attached() {\n    this.applyMask();\n  }\n\n  valueChanged() {\n    this.validate();\n    this.applyMask();\n  }\n\n  hasFocusChanged() {\n    if (this.hasFocus)\n      this.displayValue = this.value;\n    else {\n      this.value = this.displayValue;\n      this.valueChanged();\n    }\n  }\n\n  private applyMask() {\n    if (padrao.test(this.value))\n      this.displayValue = this.value.replace(padrao, \"($1) $2-$3\");\n    else\n      this.displayValue = this.value\n  }\n\n  private validate() {\n    this.isInvalid = this.value && !padrao.test(this.value);\n  }\n}\n",null,null],"sourceRoot":"..\\src"}